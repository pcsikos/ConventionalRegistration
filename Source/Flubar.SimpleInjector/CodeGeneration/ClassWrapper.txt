using Flubar.SimpleInjector.CodeGeneration

namespace Flubar.SimpleInjector.CodeGeneration
{
	public class DemoClassWrapper
	{
		private readonly DemoClass _democlass;

		public DemoClassWrapper(DemoClass democlass)
		{
			_democlass = democlass
		}

		public void virtual Method0<TValue>() 		{
			_democlass.Method0();
		}

		public void virtual Method1<TValue>() 
            TValue: class
		{
			_democlass.Method1();
		}

		public void virtual Method2<TValue>() 
            TValue: struct
		{
			_democlass.Method2();
		}

		public void virtual Method3<TValue>() 
            TValue: System.IComparable
		{
			_democlass.Method3();
		}

		public void virtual Method4<TValue, TResult>() 
            TValue: class
            TResult: TValue
		{
			_democlass.Method4();
		}

		public void virtual Method5<TValue>(System.Func<TValue> func) 
            TValue: System.IComparable
		{
			_democlass.Method5(func);
		}

		public void virtual Method6<TValue>(System.Collections.Generic.IEnumerable<TValue> func) 
            TValue: System.IComparable
		{
			_democlass.Method6(func);
		}

	}
}