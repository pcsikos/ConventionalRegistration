<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ Assembly Name="$(SolutionDir)UnitTestGenerator\bin\Debug\UnitTestGenerator.dll" #>
<#@ Assembly Name="$(SolutionDir)Flubar\bin\Debug\Flubar.dll" #>
<#@ import namespace="UnitTestGenerator" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="Flubar" #>
<#@ import namespace="Flubar.RegistrationProducers" #>
<#@ output extension=".txt" #>
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Net;
using System.Collections.Generic;
using System.Reflection;

<#

    var generator = typeof(Flubar.ConventionBuilder<>).Assembly.Scan(config => config
                .ParameterTypeMapping(new Dictionary<Type, string> {
                             { typeof(DefaultInterfaceRegistrationProducer), "producer"  },
                             { typeof(AbstractRegistrationProducer), "producer"  } 
                        })
                .WithDefaultValues(new LambdaExpression[] { (Expression<Func<Type>>)(() => typeof(object)) })

    );

    
    foreach(var typeTest in generator.BuildTests())
    {
        #>

        namespace <#= TranslateNamespace(typeTest.Type.Namespace) #>
        {
            public partial class <#= typeTest.Type.Name #>Fixture
            {
<#
        foreach(var item in typeTest.TestPackages.SelectMany(x => x.Tests))
        {
                var lines = item.SourceCode.Split(new [] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
#>
                [TestMethod]
                public void <#=item.MethodName#>()
                {
<#          foreach (var line in lines)
            { #>
                    <#= line #>		 
<#            }#>
                }

<#
        }
                #>
            }
        }

        <#
    }
    

#>
<#+

    string TranslateNamespace(string nSpace)
    {
        if (nSpace == "Kaalis.Domain")
        {
            return "Kaalis.Domain.Tests.Common";
        }
        return nSpace.Replace("Kaalis.Domain", "Kaalis.Domain.Tests");
    }

#>